// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: feast_spark/api/JobService.proto

package api

import (
	core "github.com/caraml-dev/caraml-store/caraml-store-sdk/go/protos/feast/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobType int32

const (
	JobType_INVALID_JOB          JobType = 0
	JobType_BATCH_INGESTION_JOB  JobType = 1
	JobType_STREAM_INGESTION_JOB JobType = 2
	JobType_RETRIEVAL_JOB        JobType = 4
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "INVALID_JOB",
		1: "BATCH_INGESTION_JOB",
		2: "STREAM_INGESTION_JOB",
		4: "RETRIEVAL_JOB",
	}
	JobType_value = map[string]int32{
		"INVALID_JOB":          0,
		"BATCH_INGESTION_JOB":  1,
		"STREAM_INGESTION_JOB": 2,
		"RETRIEVAL_JOB":        4,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_feast_spark_api_JobService_proto_enumTypes[0].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_feast_spark_api_JobService_proto_enumTypes[0]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{0}
}

type JobStatus int32

const (
	JobStatus_JOB_STATUS_INVALID JobStatus = 0
	// The Job has be registered and waiting to get scheduled to run
	JobStatus_JOB_STATUS_PENDING JobStatus = 1
	// The Job is currently processing its task
	JobStatus_JOB_STATUS_RUNNING JobStatus = 2
	// The Job has successfully completed its task
	JobStatus_JOB_STATUS_DONE JobStatus = 3
	// The Job has encountered an error while processing its task
	JobStatus_JOB_STATUS_ERROR JobStatus = 4
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "JOB_STATUS_INVALID",
		1: "JOB_STATUS_PENDING",
		2: "JOB_STATUS_RUNNING",
		3: "JOB_STATUS_DONE",
		4: "JOB_STATUS_ERROR",
	}
	JobStatus_value = map[string]int32{
		"JOB_STATUS_INVALID": 0,
		"JOB_STATUS_PENDING": 1,
		"JOB_STATUS_RUNNING": 2,
		"JOB_STATUS_DONE":    3,
		"JOB_STATUS_ERROR":   4,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_feast_spark_api_JobService_proto_enumTypes[1].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_feast_spark_api_JobService_proto_enumTypes[1]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{1}
}

type ScheduledJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the Job
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Project   string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Timespan of the ingested data per job, in days. The data from  end of the day - timespan till end of the day will be ingested. Eg. if the job execution date is 10/4/2021, and ingestion timespan is 2, then data from 9/4/2021 00:00 to 10/4/2021 23:59 (inclusive) will be ingested.
	IngestionTimespan int32 `protobuf:"varint,4,opt,name=ingestion_timespan,json=ingestionTimespan,proto3" json:"ingestion_timespan,omitempty"`
	// Crontab string. Eg. 0 13 * * *
	CronSchedule string `protobuf:"bytes,5,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
}

func (x *ScheduledJob) Reset() {
	*x = ScheduledJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledJob) ProtoMessage() {}

func (x *ScheduledJob) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledJob.ProtoReflect.Descriptor instead.
func (*ScheduledJob) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduledJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScheduledJob) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ScheduledJob) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ScheduledJob) GetIngestionTimespan() int32 {
	if x != nil {
		return x.IngestionTimespan
	}
	return 0
}

func (x *ScheduledJob) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the Job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the Job
	Type JobType `protobuf:"varint,2,opt,name=type,proto3,enum=feast_spark.api.JobType" json:"type,omitempty"`
	// Current job status
	Status JobStatus `protobuf:"varint,3,opt,name=status,proto3,enum=feast_spark.api.JobStatus" json:"status,omitempty"`
	// Deterministic hash of the Job
	Hash string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	// Start time of the Job
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// JobType specific metadata on the job
	//
	// Types that are assignable to Meta:
	//
	//	*Job_Retrieval
	//	*Job_BatchIngestion
	//	*Job_StreamIngestion
	Meta isJob_Meta `protobuf_oneof:"meta"`
	// Path to Spark job logs, if available
	LogUri string `protobuf:"bytes,9,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
	// Spark job error message, if available
	ErrorMessage string `protobuf:"bytes,10,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Project
	Project string `protobuf:"bytes,11,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetType() JobType {
	if x != nil {
		return x.Type
	}
	return JobType_INVALID_JOB
}

func (x *Job) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOB_STATUS_INVALID
}

func (x *Job) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Job) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (m *Job) GetMeta() isJob_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (x *Job) GetRetrieval() *Job_RetrievalJobMeta {
	if x, ok := x.GetMeta().(*Job_Retrieval); ok {
		return x.Retrieval
	}
	return nil
}

func (x *Job) GetBatchIngestion() *Job_OfflineToOnlineMeta {
	if x, ok := x.GetMeta().(*Job_BatchIngestion); ok {
		return x.BatchIngestion
	}
	return nil
}

func (x *Job) GetStreamIngestion() *Job_StreamToOnlineMeta {
	if x, ok := x.GetMeta().(*Job_StreamIngestion); ok {
		return x.StreamIngestion
	}
	return nil
}

func (x *Job) GetLogUri() string {
	if x != nil {
		return x.LogUri
	}
	return ""
}

func (x *Job) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Job) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type isJob_Meta interface {
	isJob_Meta()
}

type Job_Retrieval struct {
	Retrieval *Job_RetrievalJobMeta `protobuf:"bytes,6,opt,name=retrieval,proto3,oneof"`
}

type Job_BatchIngestion struct {
	BatchIngestion *Job_OfflineToOnlineMeta `protobuf:"bytes,7,opt,name=batch_ingestion,json=batchIngestion,proto3,oneof"`
}

type Job_StreamIngestion struct {
	StreamIngestion *Job_StreamToOnlineMeta `protobuf:"bytes,8,opt,name=stream_ingestion,json=streamIngestion,proto3,oneof"`
}

func (*Job_Retrieval) isJob_Meta() {}

func (*Job_BatchIngestion) isJob_Meta() {}

func (*Job_StreamIngestion) isJob_Meta() {}

type BatchJobRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Type of the Job
	Type JobType `protobuf:"varint,3,opt,name=type,proto3,enum=feast_spark.api.JobType" json:"type,omitempty"`
	// Current job status
	Status       JobStatus              `protobuf:"varint,4,opt,name=status,proto3,enum=feast_spark.api.JobStatus" json:"status,omitempty"`
	JobStartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=job_start_time,json=jobStartTime,proto3" json:"job_start_time,omitempty"`
	JobEndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=job_end_time,json=jobEndTime,proto3" json:"job_end_time,omitempty"`
	// JobType specific metadata on the job
	//
	// Types that are assignable to Meta:
	//
	//	*BatchJobRecord_BatchIngestion
	Meta             isBatchJobRecord_Meta `protobuf_oneof:"meta"`
	SparkAppManifest string                `protobuf:"bytes,8,opt,name=spark_app_manifest,json=sparkAppManifest,proto3" json:"spark_app_manifest,omitempty"`
}

func (x *BatchJobRecord) Reset() {
	*x = BatchJobRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobRecord) ProtoMessage() {}

func (x *BatchJobRecord) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobRecord.ProtoReflect.Descriptor instead.
func (*BatchJobRecord) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{2}
}

func (x *BatchJobRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchJobRecord) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *BatchJobRecord) GetType() JobType {
	if x != nil {
		return x.Type
	}
	return JobType_INVALID_JOB
}

func (x *BatchJobRecord) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOB_STATUS_INVALID
}

func (x *BatchJobRecord) GetJobStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobStartTime
	}
	return nil
}

func (x *BatchJobRecord) GetJobEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobEndTime
	}
	return nil
}

func (m *BatchJobRecord) GetMeta() isBatchJobRecord_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (x *BatchJobRecord) GetBatchIngestion() *BatchJobRecord_OfflineToOnlineMeta {
	if x, ok := x.GetMeta().(*BatchJobRecord_BatchIngestion); ok {
		return x.BatchIngestion
	}
	return nil
}

func (x *BatchJobRecord) GetSparkAppManifest() string {
	if x != nil {
		return x.SparkAppManifest
	}
	return ""
}

type isBatchJobRecord_Meta interface {
	isBatchJobRecord_Meta()
}

type BatchJobRecord_BatchIngestion struct {
	BatchIngestion *BatchJobRecord_OfflineToOnlineMeta `protobuf:"bytes,7,opt,name=batch_ingestion,json=batchIngestion,proto3,oneof"` // TODO: add RetrievalJobMeta
}

func (*BatchJobRecord_BatchIngestion) isBatchJobRecord_Meta() {}

// Ingest data from offline store into online store
type StartOfflineToOnlineIngestionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Feature table to ingest
	Project   string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Start of time range for source data from offline store
	StartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// End of time range for source data from offline store
	EndDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// optional setting for delta ingestion
	DeltaIngestion bool `protobuf:"varint,5,opt,name=delta_ingestion,json=deltaIngestion,proto3" json:"delta_ingestion,omitempty"`
}

func (x *StartOfflineToOnlineIngestionJobRequest) Reset() {
	*x = StartOfflineToOnlineIngestionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartOfflineToOnlineIngestionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOfflineToOnlineIngestionJobRequest) ProtoMessage() {}

func (x *StartOfflineToOnlineIngestionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOfflineToOnlineIngestionJobRequest.ProtoReflect.Descriptor instead.
func (*StartOfflineToOnlineIngestionJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{3}
}

func (x *StartOfflineToOnlineIngestionJobRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *StartOfflineToOnlineIngestionJobRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StartOfflineToOnlineIngestionJobRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *StartOfflineToOnlineIngestionJobRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *StartOfflineToOnlineIngestionJobRequest) GetDeltaIngestion() bool {
	if x != nil {
		return x.DeltaIngestion
	}
	return false
}

type StartOfflineToOnlineIngestionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID assigned by Feast
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Job start time
	JobStartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=job_start_time,json=jobStartTime,proto3" json:"job_start_time,omitempty"`
	// Feature table associated with the job
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Path to Spark job logs, if available
	LogUri string `protobuf:"bytes,4,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
}

func (x *StartOfflineToOnlineIngestionJobResponse) Reset() {
	*x = StartOfflineToOnlineIngestionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartOfflineToOnlineIngestionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOfflineToOnlineIngestionJobResponse) ProtoMessage() {}

func (x *StartOfflineToOnlineIngestionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOfflineToOnlineIngestionJobResponse.ProtoReflect.Descriptor instead.
func (*StartOfflineToOnlineIngestionJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{4}
}

func (x *StartOfflineToOnlineIngestionJobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartOfflineToOnlineIngestionJobResponse) GetJobStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobStartTime
	}
	return nil
}

func (x *StartOfflineToOnlineIngestionJobResponse) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StartOfflineToOnlineIngestionJobResponse) GetLogUri() string {
	if x != nil {
		return x.LogUri
	}
	return ""
}

// Ingest data from streaming source into online store
type StartStreamIngestionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Feature table to ingest
	Project   string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *StartStreamIngestionJobRequest) Reset() {
	*x = StartStreamIngestionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartStreamIngestionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamIngestionJobRequest) ProtoMessage() {}

func (x *StartStreamIngestionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamIngestionJobRequest.ProtoReflect.Descriptor instead.
func (*StartStreamIngestionJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{5}
}

func (x *StartStreamIngestionJobRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *StartStreamIngestionJobRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type StartStreamIngestionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID assigned by Feast
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartStreamIngestionJobResponse) Reset() {
	*x = StartStreamIngestionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartStreamIngestionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamIngestionJobResponse) ProtoMessage() {}

func (x *StartStreamIngestionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamIngestionJobResponse.ProtoReflect.Descriptor instead.
func (*StartStreamIngestionJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{6}
}

func (x *StartStreamIngestionJobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ScheduleOfflineToOnlineIngestionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Feature table to ingest
	Project   string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Timespan of the ingested data per job, in days. The data from  end of the day - timespan till end of the day will be ingested. Eg. if the job execution date is 10/4/2021, and ingestion timespan is 2, then data from 9/4/2021 00:00 to 10/4/2021 23:59 (inclusive) will be ingested.
	IngestionTimespan int32 `protobuf:"varint,3,opt,name=ingestion_timespan,json=ingestionTimespan,proto3" json:"ingestion_timespan,omitempty"`
	// Crontab string. Eg. 0 13 * * *
	CronSchedule string `protobuf:"bytes,4,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) Reset() {
	*x = ScheduleOfflineToOnlineIngestionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleOfflineToOnlineIngestionJobRequest) ProtoMessage() {}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleOfflineToOnlineIngestionJobRequest.ProtoReflect.Descriptor instead.
func (*ScheduleOfflineToOnlineIngestionJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{7}
}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) GetIngestionTimespan() int32 {
	if x != nil {
		return x.IngestionTimespan
	}
	return 0
}

func (x *ScheduleOfflineToOnlineIngestionJobRequest) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

type ScheduleOfflineToOnlineIngestionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScheduleOfflineToOnlineIngestionJobResponse) Reset() {
	*x = ScheduleOfflineToOnlineIngestionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleOfflineToOnlineIngestionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleOfflineToOnlineIngestionJobResponse) ProtoMessage() {}

func (x *ScheduleOfflineToOnlineIngestionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleOfflineToOnlineIngestionJobResponse.ProtoReflect.Descriptor instead.
func (*ScheduleOfflineToOnlineIngestionJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{8}
}

type UnscheduleOfflineToOnlineIngestionJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project   string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *UnscheduleOfflineToOnlineIngestionJobRequest) Reset() {
	*x = UnscheduleOfflineToOnlineIngestionJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnscheduleOfflineToOnlineIngestionJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnscheduleOfflineToOnlineIngestionJobRequest) ProtoMessage() {}

func (x *UnscheduleOfflineToOnlineIngestionJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnscheduleOfflineToOnlineIngestionJobRequest.ProtoReflect.Descriptor instead.
func (*UnscheduleOfflineToOnlineIngestionJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{9}
}

func (x *UnscheduleOfflineToOnlineIngestionJobRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UnscheduleOfflineToOnlineIngestionJobRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type UnscheduleOfflineToOnlineIngestionJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnscheduleOfflineToOnlineIngestionJobResponse) Reset() {
	*x = UnscheduleOfflineToOnlineIngestionJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnscheduleOfflineToOnlineIngestionJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnscheduleOfflineToOnlineIngestionJobResponse) ProtoMessage() {}

func (x *UnscheduleOfflineToOnlineIngestionJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnscheduleOfflineToOnlineIngestionJobResponse.ProtoReflect.Descriptor instead.
func (*UnscheduleOfflineToOnlineIngestionJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{10}
}

type GetHistoricalFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of feature references that are being retrieved
	FeatureRefs []string `protobuf:"bytes,1,rep,name=feature_refs,json=featureRefs,proto3" json:"feature_refs,omitempty"`
	// Batch DataSource that can be used to obtain entity values for historical retrieval.
	// For each entity value, a feature value will be retrieved for that value/timestamp
	// Only 'BATCH_*' source types are supported.
	// Currently only BATCH_FILE source type is supported.
	EntitySource *core.DataSource `protobuf:"bytes,2,opt,name=entity_source,json=entitySource,proto3" json:"entity_source,omitempty"`
	// Optional field to specify project name override. If specified, uses the
	// given project for retrieval. Overrides the projects specified in
	// Feature References if both are specified.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Specifies the path in a bucket to write the exported feature data files
	// Export to AWS S3 - s3://path/to/features
	// Export to GCP GCS -  gs://path/to/features
	OutputLocation string `protobuf:"bytes,4,opt,name=output_location,json=outputLocation,proto3" json:"output_location,omitempty"`
	// Specify format name for output, eg. parquet
	OutputFormat string `protobuf:"bytes,5,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
}

func (x *GetHistoricalFeaturesRequest) Reset() {
	*x = GetHistoricalFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalFeaturesRequest) ProtoMessage() {}

func (x *GetHistoricalFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetHistoricalFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{11}
}

func (x *GetHistoricalFeaturesRequest) GetFeatureRefs() []string {
	if x != nil {
		return x.FeatureRefs
	}
	return nil
}

func (x *GetHistoricalFeaturesRequest) GetEntitySource() *core.DataSource {
	if x != nil {
		return x.EntitySource
	}
	return nil
}

func (x *GetHistoricalFeaturesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetHistoricalFeaturesRequest) GetOutputLocation() string {
	if x != nil {
		return x.OutputLocation
	}
	return ""
}

func (x *GetHistoricalFeaturesRequest) GetOutputFormat() string {
	if x != nil {
		return x.OutputFormat
	}
	return ""
}

type GetHistoricalFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Export Job with ID assigned by Feast
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Uri to the join result output file
	OutputFileUri string `protobuf:"bytes,2,opt,name=output_file_uri,json=outputFileUri,proto3" json:"output_file_uri,omitempty"`
	// Job start time
	JobStartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=job_start_time,json=jobStartTime,proto3" json:"job_start_time,omitempty"`
	// Path to Spark job logs, if available
	LogUri string `protobuf:"bytes,4,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
}

func (x *GetHistoricalFeaturesResponse) Reset() {
	*x = GetHistoricalFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalFeaturesResponse) ProtoMessage() {}

func (x *GetHistoricalFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetHistoricalFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{12}
}

func (x *GetHistoricalFeaturesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetHistoricalFeaturesResponse) GetOutputFileUri() string {
	if x != nil {
		return x.OutputFileUri
	}
	return ""
}

func (x *GetHistoricalFeaturesResponse) GetJobStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobStartTime
	}
	return nil
}

func (x *GetHistoricalFeaturesResponse) GetLogUri() string {
	if x != nil {
		return x.LogUri
	}
	return ""
}

type ListJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeTerminated bool    `protobuf:"varint,1,opt,name=include_terminated,json=includeTerminated,proto3" json:"include_terminated,omitempty"`
	TableName         string  `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Project           string  `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Type              JobType `protobuf:"varint,4,opt,name=type,proto3,enum=feast_spark.api.JobType" json:"type,omitempty"`
}

func (x *ListJobsRequest) Reset() {
	*x = ListJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsRequest) ProtoMessage() {}

func (x *ListJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsRequest.ProtoReflect.Descriptor instead.
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{13}
}

func (x *ListJobsRequest) GetIncludeTerminated() bool {
	if x != nil {
		return x.IncludeTerminated
	}
	return false
}

func (x *ListJobsRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ListJobsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListJobsRequest) GetType() JobType {
	if x != nil {
		return x.Type
	}
	return JobType_INVALID_JOB
}

type ListScheduledJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project   string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *ListScheduledJobsRequest) Reset() {
	*x = ListScheduledJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledJobsRequest) ProtoMessage() {}

func (x *ListScheduledJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledJobsRequest.ProtoReflect.Descriptor instead.
func (*ListScheduledJobsRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{14}
}

func (x *ListScheduledJobsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListScheduledJobsRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type ListJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *ListJobsResponse) Reset() {
	*x = ListJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsResponse) ProtoMessage() {}

func (x *ListJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsResponse.ProtoReflect.Descriptor instead.
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{15}
}

func (x *ListJobsResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type ListScheduledJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*ScheduledJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *ListScheduledJobsResponse) Reset() {
	*x = ListScheduledJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledJobsResponse) ProtoMessage() {}

func (x *ListScheduledJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledJobsResponse.ProtoReflect.Descriptor instead.
func (*ListScheduledJobsResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{16}
}

func (x *ListScheduledJobsResponse) GetJobs() []*ScheduledJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{17}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{18}
}

func (x *GetJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{19}
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type CancelJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelJobResponse) Reset() {
	*x = CancelJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobResponse) ProtoMessage() {}

func (x *CancelJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobResponse.ProtoReflect.Descriptor instead.
func (*CancelJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{20}
}

type UnscheduleJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *UnscheduleJobRequest) Reset() {
	*x = UnscheduleJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnscheduleJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnscheduleJobRequest) ProtoMessage() {}

func (x *UnscheduleJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnscheduleJobRequest.ProtoReflect.Descriptor instead.
func (*UnscheduleJobRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{21}
}

func (x *UnscheduleJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type UnscheduleJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnscheduleJobResponse) Reset() {
	*x = UnscheduleJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnscheduleJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnscheduleJobResponse) ProtoMessage() {}

func (x *UnscheduleJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnscheduleJobResponse.ProtoReflect.Descriptor instead.
func (*UnscheduleJobResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{22}
}

type GetHealthMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project    string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	TableNames []string `protobuf:"bytes,2,rep,name=table_names,json=tableNames,proto3" json:"table_names,omitempty"`
}

func (x *GetHealthMetricsRequest) Reset() {
	*x = GetHealthMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthMetricsRequest) ProtoMessage() {}

func (x *GetHealthMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetHealthMetricsRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{23}
}

func (x *GetHealthMetricsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetHealthMetricsRequest) GetTableNames() []string {
	if x != nil {
		return x.TableNames
	}
	return nil
}

type GetHealthMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed []string `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed []string `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *GetHealthMetricsResponse) Reset() {
	*x = GetHealthMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthMetricsResponse) ProtoMessage() {}

func (x *GetHealthMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetHealthMetricsResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{24}
}

func (x *GetHealthMetricsResponse) GetPassed() []string {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *GetHealthMetricsResponse) GetFailed() []string {
	if x != nil {
		return x.Failed
	}
	return nil
}

type ListBatchJobRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project name
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Feature table name, required for JOB_TYPE=BATCH_INGESTION_JOB
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// optional field
	Type JobType `protobuf:"varint,3,opt,name=type,proto3,enum=feast_spark.api.JobType" json:"type,omitempty"`
	// Optional, Time range for the records to be listed. Defaults to preconfigured range
	End *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	// Optional, defaults to current time
	Start *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ListBatchJobRecordsRequest) Reset() {
	*x = ListBatchJobRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchJobRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchJobRecordsRequest) ProtoMessage() {}

func (x *ListBatchJobRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchJobRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListBatchJobRecordsRequest) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{25}
}

func (x *ListBatchJobRecordsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListBatchJobRecordsRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ListBatchJobRecordsRequest) GetType() JobType {
	if x != nil {
		return x.Type
	}
	return JobType_INVALID_JOB
}

func (x *ListBatchJobRecordsRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ListBatchJobRecordsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

type ListBatchJobRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*BatchJobRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListBatchJobRecordsResponse) Reset() {
	*x = ListBatchJobRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchJobRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchJobRecordsResponse) ProtoMessage() {}

func (x *ListBatchJobRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchJobRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListBatchJobRecordsResponse) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{26}
}

func (x *ListBatchJobRecordsResponse) GetRecords() []*BatchJobRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type Job_RetrievalJobMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputLocation string `protobuf:"bytes,1,opt,name=output_location,json=outputLocation,proto3" json:"output_location,omitempty"`
}

func (x *Job_RetrievalJobMeta) Reset() {
	*x = Job_RetrievalJobMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_RetrievalJobMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_RetrievalJobMeta) ProtoMessage() {}

func (x *Job_RetrievalJobMeta) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_RetrievalJobMeta.ProtoReflect.Descriptor instead.
func (*Job_RetrievalJobMeta) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Job_RetrievalJobMeta) GetOutputLocation() string {
	if x != nil {
		return x.OutputLocation
	}
	return ""
}

type Job_OfflineToOnlineMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *Job_OfflineToOnlineMeta) Reset() {
	*x = Job_OfflineToOnlineMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_OfflineToOnlineMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_OfflineToOnlineMeta) ProtoMessage() {}

func (x *Job_OfflineToOnlineMeta) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_OfflineToOnlineMeta.ProtoReflect.Descriptor instead.
func (*Job_OfflineToOnlineMeta) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Job_OfflineToOnlineMeta) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type Job_StreamToOnlineMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *Job_StreamToOnlineMeta) Reset() {
	*x = Job_StreamToOnlineMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_StreamToOnlineMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_StreamToOnlineMeta) ProtoMessage() {}

func (x *Job_StreamToOnlineMeta) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_StreamToOnlineMeta.ProtoReflect.Descriptor instead.
func (*Job_StreamToOnlineMeta) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Job_StreamToOnlineMeta) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type BatchJobRecord_OfflineToOnlineMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Project        string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	StartTimeParam *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time_param,json=startTimeParam,proto3" json:"start_time_param,omitempty"`
	EndTimeParam   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time_param,json=endTimeParam,proto3" json:"end_time_param,omitempty"`
}

func (x *BatchJobRecord_OfflineToOnlineMeta) Reset() {
	*x = BatchJobRecord_OfflineToOnlineMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_spark_api_JobService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobRecord_OfflineToOnlineMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobRecord_OfflineToOnlineMeta) ProtoMessage() {}

func (x *BatchJobRecord_OfflineToOnlineMeta) ProtoReflect() protoreflect.Message {
	mi := &file_feast_spark_api_JobService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobRecord_OfflineToOnlineMeta.ProtoReflect.Descriptor instead.
func (*BatchJobRecord_OfflineToOnlineMeta) Descriptor() ([]byte, []int) {
	return file_feast_spark_api_JobService_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BatchJobRecord_OfflineToOnlineMeta) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *BatchJobRecord_OfflineToOnlineMeta) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BatchJobRecord_OfflineToOnlineMeta) GetStartTimeParam() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeParam
	}
	return nil
}

func (x *BatchJobRecord_OfflineToOnlineMeta) GetEndTimeParam() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeParam
	}
	return nil
}

var File_feast_spark_api_JobService_proto protoreflect.FileDescriptor

var file_feast_spark_api_JobService_proto_rawDesc = []byte{
	0x0a, 0x20, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x1a, 0x1b, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4a,
	0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0xc0, 0x05, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f,
	0x62, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x12,
	0x53, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67,
	0x55, 0x72, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x1a, 0x3b, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4a,
	0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x34, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x33, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0x88, 0x05, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x1a, 0xd6, 0x01, 0x0a,
	0x13, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xfd, 0x01,
	0x0a, 0x27, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01,
	0x0a, 0x28, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x67, 0x55, 0x72, 0x69, 0x22, 0x59, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x31, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x2a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x2d,
	0x0a, 0x2b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a,
	0x2c, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x2d, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0xb2, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x12, 0x40, 0x0a, 0x0e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x67, 0x55, 0x72, 0x69, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x53, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x22, 0x4e, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x22, 0x26, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x22, 0x29, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22,
	0x13, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xe3,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x58, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2a, 0x60,
	0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f,
	0x42, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e,
	0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x04,
	0x2a, 0x7e, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x4f,
	0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x32, 0xff, 0x0a, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x38, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x2f, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12,
	0x3b, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x25, 0x55,
	0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x3d, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62,
	0x73, 0x12, 0x29, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d,
	0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x25, 0x2e,
	0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x86, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d,
	0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x4a, 0x6f, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d,
	0x64, 0x65, 0x76, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_feast_spark_api_JobService_proto_rawDescOnce sync.Once
	file_feast_spark_api_JobService_proto_rawDescData = file_feast_spark_api_JobService_proto_rawDesc
)

func file_feast_spark_api_JobService_proto_rawDescGZIP() []byte {
	file_feast_spark_api_JobService_proto_rawDescOnce.Do(func() {
		file_feast_spark_api_JobService_proto_rawDescData = protoimpl.X.CompressGZIP(file_feast_spark_api_JobService_proto_rawDescData)
	})
	return file_feast_spark_api_JobService_proto_rawDescData
}

var file_feast_spark_api_JobService_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_feast_spark_api_JobService_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_feast_spark_api_JobService_proto_goTypes = []interface{}{
	(JobType)(0),           // 0: feast_spark.api.JobType
	(JobStatus)(0),         // 1: feast_spark.api.JobStatus
	(*ScheduledJob)(nil),   // 2: feast_spark.api.ScheduledJob
	(*Job)(nil),            // 3: feast_spark.api.Job
	(*BatchJobRecord)(nil), // 4: feast_spark.api.BatchJobRecord
	(*StartOfflineToOnlineIngestionJobRequest)(nil),       // 5: feast_spark.api.StartOfflineToOnlineIngestionJobRequest
	(*StartOfflineToOnlineIngestionJobResponse)(nil),      // 6: feast_spark.api.StartOfflineToOnlineIngestionJobResponse
	(*StartStreamIngestionJobRequest)(nil),                // 7: feast_spark.api.StartStreamIngestionJobRequest
	(*StartStreamIngestionJobResponse)(nil),               // 8: feast_spark.api.StartStreamIngestionJobResponse
	(*ScheduleOfflineToOnlineIngestionJobRequest)(nil),    // 9: feast_spark.api.ScheduleOfflineToOnlineIngestionJobRequest
	(*ScheduleOfflineToOnlineIngestionJobResponse)(nil),   // 10: feast_spark.api.ScheduleOfflineToOnlineIngestionJobResponse
	(*UnscheduleOfflineToOnlineIngestionJobRequest)(nil),  // 11: feast_spark.api.UnscheduleOfflineToOnlineIngestionJobRequest
	(*UnscheduleOfflineToOnlineIngestionJobResponse)(nil), // 12: feast_spark.api.UnscheduleOfflineToOnlineIngestionJobResponse
	(*GetHistoricalFeaturesRequest)(nil),                  // 13: feast_spark.api.GetHistoricalFeaturesRequest
	(*GetHistoricalFeaturesResponse)(nil),                 // 14: feast_spark.api.GetHistoricalFeaturesResponse
	(*ListJobsRequest)(nil),                               // 15: feast_spark.api.ListJobsRequest
	(*ListScheduledJobsRequest)(nil),                      // 16: feast_spark.api.ListScheduledJobsRequest
	(*ListJobsResponse)(nil),                              // 17: feast_spark.api.ListJobsResponse
	(*ListScheduledJobsResponse)(nil),                     // 18: feast_spark.api.ListScheduledJobsResponse
	(*GetJobRequest)(nil),                                 // 19: feast_spark.api.GetJobRequest
	(*GetJobResponse)(nil),                                // 20: feast_spark.api.GetJobResponse
	(*CancelJobRequest)(nil),                              // 21: feast_spark.api.CancelJobRequest
	(*CancelJobResponse)(nil),                             // 22: feast_spark.api.CancelJobResponse
	(*UnscheduleJobRequest)(nil),                          // 23: feast_spark.api.UnscheduleJobRequest
	(*UnscheduleJobResponse)(nil),                         // 24: feast_spark.api.UnscheduleJobResponse
	(*GetHealthMetricsRequest)(nil),                       // 25: feast_spark.api.GetHealthMetricsRequest
	(*GetHealthMetricsResponse)(nil),                      // 26: feast_spark.api.GetHealthMetricsResponse
	(*ListBatchJobRecordsRequest)(nil),                    // 27: feast_spark.api.ListBatchJobRecordsRequest
	(*ListBatchJobRecordsResponse)(nil),                   // 28: feast_spark.api.ListBatchJobRecordsResponse
	(*Job_RetrievalJobMeta)(nil),                          // 29: feast_spark.api.Job.RetrievalJobMeta
	(*Job_OfflineToOnlineMeta)(nil),                       // 30: feast_spark.api.Job.OfflineToOnlineMeta
	(*Job_StreamToOnlineMeta)(nil),                        // 31: feast_spark.api.Job.StreamToOnlineMeta
	(*BatchJobRecord_OfflineToOnlineMeta)(nil),            // 32: feast_spark.api.BatchJobRecord.OfflineToOnlineMeta
	(*timestamppb.Timestamp)(nil),                         // 33: google.protobuf.Timestamp
	(*core.DataSource)(nil),                               // 34: feast.core.DataSource
}
var file_feast_spark_api_JobService_proto_depIdxs = []int32{
	0,  // 0: feast_spark.api.Job.type:type_name -> feast_spark.api.JobType
	1,  // 1: feast_spark.api.Job.status:type_name -> feast_spark.api.JobStatus
	33, // 2: feast_spark.api.Job.start_time:type_name -> google.protobuf.Timestamp
	29, // 3: feast_spark.api.Job.retrieval:type_name -> feast_spark.api.Job.RetrievalJobMeta
	30, // 4: feast_spark.api.Job.batch_ingestion:type_name -> feast_spark.api.Job.OfflineToOnlineMeta
	31, // 5: feast_spark.api.Job.stream_ingestion:type_name -> feast_spark.api.Job.StreamToOnlineMeta
	0,  // 6: feast_spark.api.BatchJobRecord.type:type_name -> feast_spark.api.JobType
	1,  // 7: feast_spark.api.BatchJobRecord.status:type_name -> feast_spark.api.JobStatus
	33, // 8: feast_spark.api.BatchJobRecord.job_start_time:type_name -> google.protobuf.Timestamp
	33, // 9: feast_spark.api.BatchJobRecord.job_end_time:type_name -> google.protobuf.Timestamp
	32, // 10: feast_spark.api.BatchJobRecord.batch_ingestion:type_name -> feast_spark.api.BatchJobRecord.OfflineToOnlineMeta
	33, // 11: feast_spark.api.StartOfflineToOnlineIngestionJobRequest.start_date:type_name -> google.protobuf.Timestamp
	33, // 12: feast_spark.api.StartOfflineToOnlineIngestionJobRequest.end_date:type_name -> google.protobuf.Timestamp
	33, // 13: feast_spark.api.StartOfflineToOnlineIngestionJobResponse.job_start_time:type_name -> google.protobuf.Timestamp
	34, // 14: feast_spark.api.GetHistoricalFeaturesRequest.entity_source:type_name -> feast.core.DataSource
	33, // 15: feast_spark.api.GetHistoricalFeaturesResponse.job_start_time:type_name -> google.protobuf.Timestamp
	0,  // 16: feast_spark.api.ListJobsRequest.type:type_name -> feast_spark.api.JobType
	3,  // 17: feast_spark.api.ListJobsResponse.jobs:type_name -> feast_spark.api.Job
	2,  // 18: feast_spark.api.ListScheduledJobsResponse.jobs:type_name -> feast_spark.api.ScheduledJob
	3,  // 19: feast_spark.api.GetJobResponse.job:type_name -> feast_spark.api.Job
	0,  // 20: feast_spark.api.ListBatchJobRecordsRequest.type:type_name -> feast_spark.api.JobType
	33, // 21: feast_spark.api.ListBatchJobRecordsRequest.end:type_name -> google.protobuf.Timestamp
	33, // 22: feast_spark.api.ListBatchJobRecordsRequest.start:type_name -> google.protobuf.Timestamp
	4,  // 23: feast_spark.api.ListBatchJobRecordsResponse.records:type_name -> feast_spark.api.BatchJobRecord
	33, // 24: feast_spark.api.BatchJobRecord.OfflineToOnlineMeta.start_time_param:type_name -> google.protobuf.Timestamp
	33, // 25: feast_spark.api.BatchJobRecord.OfflineToOnlineMeta.end_time_param:type_name -> google.protobuf.Timestamp
	5,  // 26: feast_spark.api.JobService.StartOfflineToOnlineIngestionJob:input_type -> feast_spark.api.StartOfflineToOnlineIngestionJobRequest
	7,  // 27: feast_spark.api.JobService.StartStreamIngestionJob:input_type -> feast_spark.api.StartStreamIngestionJobRequest
	9,  // 28: feast_spark.api.JobService.ScheduleOfflineToOnlineIngestionJob:input_type -> feast_spark.api.ScheduleOfflineToOnlineIngestionJobRequest
	11, // 29: feast_spark.api.JobService.UnscheduleOfflineToOnlineIngestionJob:input_type -> feast_spark.api.UnscheduleOfflineToOnlineIngestionJobRequest
	13, // 30: feast_spark.api.JobService.GetHistoricalFeatures:input_type -> feast_spark.api.GetHistoricalFeaturesRequest
	15, // 31: feast_spark.api.JobService.ListJobs:input_type -> feast_spark.api.ListJobsRequest
	16, // 32: feast_spark.api.JobService.ListScheduledJobs:input_type -> feast_spark.api.ListScheduledJobsRequest
	21, // 33: feast_spark.api.JobService.CancelJob:input_type -> feast_spark.api.CancelJobRequest
	23, // 34: feast_spark.api.JobService.UnscheduleJob:input_type -> feast_spark.api.UnscheduleJobRequest
	19, // 35: feast_spark.api.JobService.GetJob:input_type -> feast_spark.api.GetJobRequest
	25, // 36: feast_spark.api.JobService.GetHealthMetrics:input_type -> feast_spark.api.GetHealthMetricsRequest
	27, // 37: feast_spark.api.JobService.ListBatchJobRecords:input_type -> feast_spark.api.ListBatchJobRecordsRequest
	6,  // 38: feast_spark.api.JobService.StartOfflineToOnlineIngestionJob:output_type -> feast_spark.api.StartOfflineToOnlineIngestionJobResponse
	8,  // 39: feast_spark.api.JobService.StartStreamIngestionJob:output_type -> feast_spark.api.StartStreamIngestionJobResponse
	10, // 40: feast_spark.api.JobService.ScheduleOfflineToOnlineIngestionJob:output_type -> feast_spark.api.ScheduleOfflineToOnlineIngestionJobResponse
	12, // 41: feast_spark.api.JobService.UnscheduleOfflineToOnlineIngestionJob:output_type -> feast_spark.api.UnscheduleOfflineToOnlineIngestionJobResponse
	14, // 42: feast_spark.api.JobService.GetHistoricalFeatures:output_type -> feast_spark.api.GetHistoricalFeaturesResponse
	17, // 43: feast_spark.api.JobService.ListJobs:output_type -> feast_spark.api.ListJobsResponse
	18, // 44: feast_spark.api.JobService.ListScheduledJobs:output_type -> feast_spark.api.ListScheduledJobsResponse
	22, // 45: feast_spark.api.JobService.CancelJob:output_type -> feast_spark.api.CancelJobResponse
	24, // 46: feast_spark.api.JobService.UnscheduleJob:output_type -> feast_spark.api.UnscheduleJobResponse
	20, // 47: feast_spark.api.JobService.GetJob:output_type -> feast_spark.api.GetJobResponse
	26, // 48: feast_spark.api.JobService.GetHealthMetrics:output_type -> feast_spark.api.GetHealthMetricsResponse
	28, // 49: feast_spark.api.JobService.ListBatchJobRecords:output_type -> feast_spark.api.ListBatchJobRecordsResponse
	38, // [38:50] is the sub-list for method output_type
	26, // [26:38] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_feast_spark_api_JobService_proto_init() }
func file_feast_spark_api_JobService_proto_init() {
	if File_feast_spark_api_JobService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feast_spark_api_JobService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartOfflineToOnlineIngestionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartOfflineToOnlineIngestionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartStreamIngestionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartStreamIngestionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleOfflineToOnlineIngestionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleOfflineToOnlineIngestionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnscheduleOfflineToOnlineIngestionJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnscheduleOfflineToOnlineIngestionJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnscheduleJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnscheduleJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchJobRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchJobRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_RetrievalJobMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_OfflineToOnlineMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_StreamToOnlineMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_spark_api_JobService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobRecord_OfflineToOnlineMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feast_spark_api_JobService_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Job_Retrieval)(nil),
		(*Job_BatchIngestion)(nil),
		(*Job_StreamIngestion)(nil),
	}
	file_feast_spark_api_JobService_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BatchJobRecord_BatchIngestion)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feast_spark_api_JobService_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feast_spark_api_JobService_proto_goTypes,
		DependencyIndexes: file_feast_spark_api_JobService_proto_depIdxs,
		EnumInfos:         file_feast_spark_api_JobService_proto_enumTypes,
		MessageInfos:      file_feast_spark_api_JobService_proto_msgTypes,
	}.Build()
	File_feast_spark_api_JobService_proto = out.File
	file_feast_spark_api_JobService_proto_rawDesc = nil
	file_feast_spark_api_JobService_proto_goTypes = nil
	file_feast_spark_api_JobService_proto_depIdxs = nil
}
