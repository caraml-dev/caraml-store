// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: feast_spark/api/JobService.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobService_StartOfflineToOnlineIngestionJob_FullMethodName      = "/feast_spark.api.JobService/StartOfflineToOnlineIngestionJob"
	JobService_StartStreamIngestionJob_FullMethodName               = "/feast_spark.api.JobService/StartStreamIngestionJob"
	JobService_ScheduleOfflineToOnlineIngestionJob_FullMethodName   = "/feast_spark.api.JobService/ScheduleOfflineToOnlineIngestionJob"
	JobService_UnscheduleOfflineToOnlineIngestionJob_FullMethodName = "/feast_spark.api.JobService/UnscheduleOfflineToOnlineIngestionJob"
	JobService_GetHistoricalFeatures_FullMethodName                 = "/feast_spark.api.JobService/GetHistoricalFeatures"
	JobService_ListJobs_FullMethodName                              = "/feast_spark.api.JobService/ListJobs"
	JobService_ListScheduledJobs_FullMethodName                     = "/feast_spark.api.JobService/ListScheduledJobs"
	JobService_CancelJob_FullMethodName                             = "/feast_spark.api.JobService/CancelJob"
	JobService_UnscheduleJob_FullMethodName                         = "/feast_spark.api.JobService/UnscheduleJob"
	JobService_GetJob_FullMethodName                                = "/feast_spark.api.JobService/GetJob"
	JobService_GetHealthMetrics_FullMethodName                      = "/feast_spark.api.JobService/GetHealthMetrics"
	JobService_ListBatchJobRecords_FullMethodName                   = "/feast_spark.api.JobService/ListBatchJobRecords"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	// Start job to ingest data from offline store into online store
	StartOfflineToOnlineIngestionJob(ctx context.Context, in *StartOfflineToOnlineIngestionJobRequest, opts ...grpc.CallOption) (*StartOfflineToOnlineIngestionJobResponse, error)
	// Start job to ingest data from streaming source into online store
	StartStreamIngestionJob(ctx context.Context, in *StartStreamIngestionJobRequest, opts ...grpc.CallOption) (*StartStreamIngestionJobResponse, error)
	// Start scheduled job to ingest data from offline store into online store
	ScheduleOfflineToOnlineIngestionJob(ctx context.Context, in *ScheduleOfflineToOnlineIngestionJobRequest, opts ...grpc.CallOption) (*ScheduleOfflineToOnlineIngestionJobResponse, error)
	// Unschedule job to ingest data from offline store into online store
	UnscheduleOfflineToOnlineIngestionJob(ctx context.Context, in *UnscheduleOfflineToOnlineIngestionJobRequest, opts ...grpc.CallOption) (*UnscheduleOfflineToOnlineIngestionJobResponse, error)
	// Produce a training dataset, return a job id that will provide a file reference
	GetHistoricalFeatures(ctx context.Context, in *GetHistoricalFeaturesRequest, opts ...grpc.CallOption) (*GetHistoricalFeaturesResponse, error)
	// List all types of jobs
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// List all scheduled jobs
	ListScheduledJobs(ctx context.Context, in *ListScheduledJobsRequest, opts ...grpc.CallOption) (*ListScheduledJobsResponse, error)
	// Cancel a single job
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	// Unschedule a job
	UnscheduleJob(ctx context.Context, in *UnscheduleJobRequest, opts ...grpc.CallOption) (*UnscheduleJobResponse, error)
	// Get details of a single job
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	// Get ingestion health metrics for a Feature Table
	GetHealthMetrics(ctx context.Context, in *GetHealthMetricsRequest, opts ...grpc.CallOption) (*GetHealthMetricsResponse, error)
	// List batch ingestion job record for a Feature Table
	ListBatchJobRecords(ctx context.Context, in *ListBatchJobRecordsRequest, opts ...grpc.CallOption) (*ListBatchJobRecordsResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) StartOfflineToOnlineIngestionJob(ctx context.Context, in *StartOfflineToOnlineIngestionJobRequest, opts ...grpc.CallOption) (*StartOfflineToOnlineIngestionJobResponse, error) {
	out := new(StartOfflineToOnlineIngestionJobResponse)
	err := c.cc.Invoke(ctx, JobService_StartOfflineToOnlineIngestionJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StartStreamIngestionJob(ctx context.Context, in *StartStreamIngestionJobRequest, opts ...grpc.CallOption) (*StartStreamIngestionJobResponse, error) {
	out := new(StartStreamIngestionJobResponse)
	err := c.cc.Invoke(ctx, JobService_StartStreamIngestionJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ScheduleOfflineToOnlineIngestionJob(ctx context.Context, in *ScheduleOfflineToOnlineIngestionJobRequest, opts ...grpc.CallOption) (*ScheduleOfflineToOnlineIngestionJobResponse, error) {
	out := new(ScheduleOfflineToOnlineIngestionJobResponse)
	err := c.cc.Invoke(ctx, JobService_ScheduleOfflineToOnlineIngestionJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) UnscheduleOfflineToOnlineIngestionJob(ctx context.Context, in *UnscheduleOfflineToOnlineIngestionJobRequest, opts ...grpc.CallOption) (*UnscheduleOfflineToOnlineIngestionJobResponse, error) {
	out := new(UnscheduleOfflineToOnlineIngestionJobResponse)
	err := c.cc.Invoke(ctx, JobService_UnscheduleOfflineToOnlineIngestionJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetHistoricalFeatures(ctx context.Context, in *GetHistoricalFeaturesRequest, opts ...grpc.CallOption) (*GetHistoricalFeaturesResponse, error) {
	out := new(GetHistoricalFeaturesResponse)
	err := c.cc.Invoke(ctx, JobService_GetHistoricalFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, JobService_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListScheduledJobs(ctx context.Context, in *ListScheduledJobsRequest, opts ...grpc.CallOption) (*ListScheduledJobsResponse, error) {
	out := new(ListScheduledJobsResponse)
	err := c.cc.Invoke(ctx, JobService_ListScheduledJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, JobService_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) UnscheduleJob(ctx context.Context, in *UnscheduleJobRequest, opts ...grpc.CallOption) (*UnscheduleJobResponse, error) {
	out := new(UnscheduleJobResponse)
	err := c.cc.Invoke(ctx, JobService_UnscheduleJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, JobService_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetHealthMetrics(ctx context.Context, in *GetHealthMetricsRequest, opts ...grpc.CallOption) (*GetHealthMetricsResponse, error) {
	out := new(GetHealthMetricsResponse)
	err := c.cc.Invoke(ctx, JobService_GetHealthMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListBatchJobRecords(ctx context.Context, in *ListBatchJobRecordsRequest, opts ...grpc.CallOption) (*ListBatchJobRecordsResponse, error) {
	out := new(ListBatchJobRecordsResponse)
	err := c.cc.Invoke(ctx, JobService_ListBatchJobRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations should embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	// Start job to ingest data from offline store into online store
	StartOfflineToOnlineIngestionJob(context.Context, *StartOfflineToOnlineIngestionJobRequest) (*StartOfflineToOnlineIngestionJobResponse, error)
	// Start job to ingest data from streaming source into online store
	StartStreamIngestionJob(context.Context, *StartStreamIngestionJobRequest) (*StartStreamIngestionJobResponse, error)
	// Start scheduled job to ingest data from offline store into online store
	ScheduleOfflineToOnlineIngestionJob(context.Context, *ScheduleOfflineToOnlineIngestionJobRequest) (*ScheduleOfflineToOnlineIngestionJobResponse, error)
	// Unschedule job to ingest data from offline store into online store
	UnscheduleOfflineToOnlineIngestionJob(context.Context, *UnscheduleOfflineToOnlineIngestionJobRequest) (*UnscheduleOfflineToOnlineIngestionJobResponse, error)
	// Produce a training dataset, return a job id that will provide a file reference
	GetHistoricalFeatures(context.Context, *GetHistoricalFeaturesRequest) (*GetHistoricalFeaturesResponse, error)
	// List all types of jobs
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	// List all scheduled jobs
	ListScheduledJobs(context.Context, *ListScheduledJobsRequest) (*ListScheduledJobsResponse, error)
	// Cancel a single job
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	// Unschedule a job
	UnscheduleJob(context.Context, *UnscheduleJobRequest) (*UnscheduleJobResponse, error)
	// Get details of a single job
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	// Get ingestion health metrics for a Feature Table
	GetHealthMetrics(context.Context, *GetHealthMetricsRequest) (*GetHealthMetricsResponse, error)
	// List batch ingestion job record for a Feature Table
	ListBatchJobRecords(context.Context, *ListBatchJobRecordsRequest) (*ListBatchJobRecordsResponse, error)
}

// UnimplementedJobServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) StartOfflineToOnlineIngestionJob(context.Context, *StartOfflineToOnlineIngestionJobRequest) (*StartOfflineToOnlineIngestionJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOfflineToOnlineIngestionJob not implemented")
}
func (UnimplementedJobServiceServer) StartStreamIngestionJob(context.Context, *StartStreamIngestionJobRequest) (*StartStreamIngestionJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStreamIngestionJob not implemented")
}
func (UnimplementedJobServiceServer) ScheduleOfflineToOnlineIngestionJob(context.Context, *ScheduleOfflineToOnlineIngestionJobRequest) (*ScheduleOfflineToOnlineIngestionJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleOfflineToOnlineIngestionJob not implemented")
}
func (UnimplementedJobServiceServer) UnscheduleOfflineToOnlineIngestionJob(context.Context, *UnscheduleOfflineToOnlineIngestionJobRequest) (*UnscheduleOfflineToOnlineIngestionJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnscheduleOfflineToOnlineIngestionJob not implemented")
}
func (UnimplementedJobServiceServer) GetHistoricalFeatures(context.Context, *GetHistoricalFeaturesRequest) (*GetHistoricalFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalFeatures not implemented")
}
func (UnimplementedJobServiceServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedJobServiceServer) ListScheduledJobs(context.Context, *ListScheduledJobsRequest) (*ListScheduledJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledJobs not implemented")
}
func (UnimplementedJobServiceServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobServiceServer) UnscheduleJob(context.Context, *UnscheduleJobRequest) (*UnscheduleJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnscheduleJob not implemented")
}
func (UnimplementedJobServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobServiceServer) GetHealthMetrics(context.Context, *GetHealthMetricsRequest) (*GetHealthMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthMetrics not implemented")
}
func (UnimplementedJobServiceServer) ListBatchJobRecords(context.Context, *ListBatchJobRecordsRequest) (*ListBatchJobRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBatchJobRecords not implemented")
}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_StartOfflineToOnlineIngestionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOfflineToOnlineIngestionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StartOfflineToOnlineIngestionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_StartOfflineToOnlineIngestionJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StartOfflineToOnlineIngestionJob(ctx, req.(*StartOfflineToOnlineIngestionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StartStreamIngestionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamIngestionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StartStreamIngestionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_StartStreamIngestionJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StartStreamIngestionJob(ctx, req.(*StartStreamIngestionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ScheduleOfflineToOnlineIngestionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleOfflineToOnlineIngestionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ScheduleOfflineToOnlineIngestionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ScheduleOfflineToOnlineIngestionJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ScheduleOfflineToOnlineIngestionJob(ctx, req.(*ScheduleOfflineToOnlineIngestionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_UnscheduleOfflineToOnlineIngestionJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnscheduleOfflineToOnlineIngestionJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).UnscheduleOfflineToOnlineIngestionJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_UnscheduleOfflineToOnlineIngestionJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).UnscheduleOfflineToOnlineIngestionJob(ctx, req.(*UnscheduleOfflineToOnlineIngestionJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetHistoricalFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetHistoricalFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetHistoricalFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetHistoricalFeatures(ctx, req.(*GetHistoricalFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListScheduledJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListScheduledJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ListScheduledJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListScheduledJobs(ctx, req.(*ListScheduledJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_UnscheduleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnscheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).UnscheduleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_UnscheduleJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).UnscheduleJob(ctx, req.(*UnscheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetHealthMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetHealthMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetHealthMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetHealthMetrics(ctx, req.(*GetHealthMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListBatchJobRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBatchJobRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListBatchJobRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ListBatchJobRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListBatchJobRecords(ctx, req.(*ListBatchJobRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feast_spark.api.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartOfflineToOnlineIngestionJob",
			Handler:    _JobService_StartOfflineToOnlineIngestionJob_Handler,
		},
		{
			MethodName: "StartStreamIngestionJob",
			Handler:    _JobService_StartStreamIngestionJob_Handler,
		},
		{
			MethodName: "ScheduleOfflineToOnlineIngestionJob",
			Handler:    _JobService_ScheduleOfflineToOnlineIngestionJob_Handler,
		},
		{
			MethodName: "UnscheduleOfflineToOnlineIngestionJob",
			Handler:    _JobService_UnscheduleOfflineToOnlineIngestionJob_Handler,
		},
		{
			MethodName: "GetHistoricalFeatures",
			Handler:    _JobService_GetHistoricalFeatures_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _JobService_ListJobs_Handler,
		},
		{
			MethodName: "ListScheduledJobs",
			Handler:    _JobService_ListScheduledJobs_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _JobService_CancelJob_Handler,
		},
		{
			MethodName: "UnscheduleJob",
			Handler:    _JobService_UnscheduleJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
		{
			MethodName: "GetHealthMetrics",
			Handler:    _JobService_GetHealthMetrics_Handler,
		},
		{
			MethodName: "ListBatchJobRecords",
			Handler:    _JobService_ListBatchJobRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feast_spark/api/JobService.proto",
}
